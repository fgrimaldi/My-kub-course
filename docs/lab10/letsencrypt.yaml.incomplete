https://cert-manager.io/docs/installation/kubernetes/
https://kruschecompany.com/cert-manager-kubernetes/
https://github.com/mmatur/traefik-cert-manager

kubectl create namespace cert-manager
kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

kubectl apply -f -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml

kubectl get pods --namespace cert-manager


```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager-test
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: test-selfsigned
  namespace: cert-manager-test
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: selfsigned-cert
  namespace: cert-manager-test
spec:
  commonName: desotech.io
  secretName: selfsigned-cert-tls
  issuerRef:
    name: test-selfsigned
```
kubectl apply -f test-certificate.yaml

Check the status of the newly created certificate. You may need to wait a few seconds before cert-manager processes the certificate request.


kubectl describe certificate -n cert-manager-test


kubectl delete -f test-certificate.yaml



apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: nicola@decandia.eu
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: letsencrypt-issuer-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: traefik


Check the certificate issuer with the command:
echo | openssl s_client -showcerts -servername desotech.io -connect desotech.io:443 2>/dev/null | openssl x509 -inform pem -text | grep 'Issuer'

NO WORK

Proviamo nginx

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml

kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx

kubectl get svc --namespace=ingress-nginx

