# Service Accounts

Sometimes, we want to grant pods secure Kubernetes API access (ex for monitoring or logging purposes), and we'd like to govern that access with the same sort of RBAC rules we apply to our human users. For this, there are *service accounts*.

By the end of this exercise, you should be able to:

 - Configure permissions for a service account
 - Identify the service account credentials in a pod
 - Use service account credentials to securely access a pod

## Setting up a Service Account

1.  As an admin, create a namespace `sa-demo`:

    ```yaml
    apiVersion: v1
    kind: Namespace
    metadata:
      name: sa-demo
    ```

2.  Create a custom service account in the `sa-demo` namespace:

    ```yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: logbot
      namespace: sa-demo
    ```

    > **Note**: If you navigate **Kubernetes -> Service Accounts**, you'll see that every namespace gets a service account automatically created named `default`. By default, all pods get access to the `default` service account in the namespace they are created in; therefore, it's a good idea to **avoid giving any permissions to a default service account unless absolutely necessary**; every pod in that namespace will get that service account's credentials mounted into it by default, potentially escalating pods' permissions unintentionally.

3.  Lets give our `logbot` service account the standard 'view' clusterRole for all objects in the `sa-demo` namespace; navigate **Access Control -> Grants -> Create Role Binding**, and fill out the form as follows:

    In *1. Subject*:
    - *Select Subject Type*: **Service Account**
    - *Namespace*: **sa-demo**
    - *Service Account*: **logbot**

    Click **Next**. Then in *2. Resource Set*, click **Select Namespace** beside `sa-demo`, and finally in *3. Role*:
    - *Role Type*: **Cluster Role**
    - *Select Cluster Role*: **view**

    Finish by clicking **Create**.

4.  Finally, let's create a pod in your `sa-demo` namespace:

    ```yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: demo
      namespace: sa-demo
    spec:
      containers:
      - name: sa-demo
        image: centos:7
        command: ["ping"]
        args: ["8.8.8.8"]
      serviceAccountName: logbot
    ```

## Using Service Account Credentials

Service account credentials are mounted as a secret in the pods that use them. Here we'll extract those credentials, and show that we can use them to hit UCP's Kube API.

1.  Create a bash shell inside your new pod by navigating **Kubernetes -> Pods -> demo**, then clicking on the **>_** in the top right and specifying `bash` for a shell. Don't forget to set your context to `sa-demo`.

2.  List your service account info:

    ```bash
    [root@demo /]# ls /var/run/secrets/kubernetes.io/serviceaccount

    ca.crt  namespace  token
    ```

    `token` is your access token to the kube API; `ca.crt` is the signed certificate identifying the Kube cluster; and `namespace` just contains the name of the current namespace, `sa-demo` in this example.

3.  Create some convenient environment variables and aliases for passing these credentials into curl-based API calls:

    ```bash
    [root@demo /]# KUBETOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    [root@demo /]# KUBENS=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    [root@demo /]# alias 'kube-api=curl -v --cacert \
        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        -H "Authorization: Bearer $KUBETOKEN"'
    ```

4.  Query the Kube API for the pods in the current namespace:

    ```bash
    [root@demo /]# kube-api \
        https://kubernetes.default.svc/api/v1/namespaces/${KUBENS}/pods
    ```

    Note the `kubernetes.default.svc` default DNS entry which will resolve to the correct IP and port of your Kube API. You should get a long json response detailing all the pods in this namespace - the query has been successful.

5.  Try to list pods in the `default` namespace:

    ```bash
    [root@demo /]# kube-api \
        https://kubernetes.default.svc/api/v1/namespaces/default/pods
    ```

    You'll get an `access denied` response, since the `logbot` service account doesn't have any permissions in the `default` namespace.

6.  Clean up by deleting the pod you made for this exercise.

## Conclusion

In this exercise, we set up a service account and used the credentials it provisioned to access the Kube API from within a pod. In general, it's best to create service accounts with limited permissions designed to permit very specific tasks, and associate only those pods that need those permissions with that service account; avoid giving any permissions to the `default` service account, since all pods will inherit these unless provisioned with a different service account.
